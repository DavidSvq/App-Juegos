/**
 * <h1>Package Modelo</h1>
 * <p>Contiene las clases necesarias para mapear las tablas de la base de datos.</p>
 * <p>Está incluido en el package <code>App</code>, que es el principal.</p>
 * 
 * <h1>ENGLISH</h1>
 * <p>Model package that contains the necessary classes to map the database tables.</p>
 * <p>It is included in the <code>App</code> package, which is the main one.</p>
 */
package com.juegos.app.modelo;

import java.util.Objects;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

/**
 * <h1>Clase Jugador</h1>
 * <p>Representa un jugador dentro de la base de datos.</p>
 * <p>Alberga los atributos <code>Id</code>, <code>nombre</code> e <code>email</code>.</p>
 * <p>Contiene 2 constructores: uno vacío y otro con todos los atributos como parámetros, excepto <code>Id</code>, que se genera en la base de datos.</p>
 * <p>Además, contiene sus métodos básicos tales como los <strong>getters y setters</strong> (excepto <code>setId</code>, ya que el Id no se debe modificar).</p>
 * 
 * <h2>Anotaciones de JPA</h2>
 * <ul>
 *   <li><code>@Entity</code> indica que esta clase es una entidad de JPA.</li>
 *   <li><code>@Table</code> especifica el nombre de la tabla en la base de datos.</li>
 * </ul>
 * 
 * <h1>ENGLISH</h1>
 * <p><strong>Player Class</strong> represents a player within the database.</p>
 * <p>It contains the attributes <code>Id</code>, <code>name</code>, and <code>email</code>.</p>
 * <p>It has two constructors: one empty and another with all attributes as parameters, except <code>Id</code>, which is generated by the database.</p>
 * <p>Additionally, it includes basic methods such as <strong>getters and setters</strong> (except <code>setId</code>, as the Id should not be modified).</p>
 * 
 * <h2>JPA Annotations</h2>
 * <ul>
 *   <li><code>@Entity</code> indicates that this class is a JPA entity.</li>
 *   <li><code>@Table</code> specifies the table name in the database.</li>
 * </ul>
 * 
 * <p><strong>Author:</strong> David</p>
 * <p><strong>Version:</strong> 1.0</p>
 * <p><strong>Since:</strong> 2025</p>
 * 
 * @see jakarta.persistence.Entity
 * @see jakarta.persistence.Table
 */
@Entity
@Table(name = "jugadores")
public class Jugador {
	/**
	 * <h1>Atributo ID</h1>
	 * <p>Tipo: <code>Long</code>. Se genera automáticamente de forma incremental en la base de datos.</p>
	 * 
	 * <h2>Anotaciones</h2>
	 * <ul>
	 *   <li><code>@Id</code>: Indica que el atributo debe ser gestionado como un ID.</li>
	 *   <li><code>@GeneratedValue</code>: Especifica que el ID se generará en la base de datos.</li>
	 *   <li><code>strategy = GenerationType.IDENTITY</code>: Define que el ID será auto-incremental.</li>
	 * </ul>
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>ID Attribute</h1>
	 * <p>Type: <code>Long</code>. It is automatically generated as an incrementing value in the database.</p>
	 * 
	 * <h2>Annotations</h2>
	 * <ul>
	 *   <li><code>@Id</code>: Indicates that the attribute should be managed as an ID.</li>
	 *   <li><code>@GeneratedValue</code>: Specifies that a new ID should be generated in the database.</li>
	 *   <li><code>strategy = GenerationType.IDENTITY</code>: Defines the generation method ensuring auto-incrementation.</li>
	 * </ul>
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	/**
	 * <h1>Atributo nombre</h1>
	 * <p>Tipo: <code>String</code>. Representa el nombre del jugador.</p>
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Attribute <code>name</code> of type <code>String</code>, which represents the player's name.</p>
	 */
	private String nombre;
	
	/**
	 * <h1>Atributo email</h1>
	 * <p>Tipo: <code>String</code>. Representa el correo electrónico del jugador.</p>
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Attribute <code>email</code> of type <code>String</code>, which represents the player's email address.</p>
	 */
	private String email;

	/**
	 * <h1>Constructor vacío</h1>
	 * <p>Requerido para su uso con <code>JpaRepository</code>.</p>
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Empty constructor, required for use with <code>JpaRepository</code>.</p>
	 */
	public Jugador() {
		
	}

	/**
	 * <h1>Constructor</h1>
	 * <p>Incluye 2 de los 3 atributos de la clase, ya que el atributo <code>Id</code> no se genera en Java, sino en la base de datos.</p>
	 * 
	 * <h2>Parámetros</h2>
	 * <ul>
	 *   <li><code>nombre</code>: Tipo <code>String</code>, en referencia al nombre del jugador.</li>
	 *   <li><code>email</code>: Tipo <code>String</code>, en referencia al correo electrónico del jugador.</li>
	 * </ul>
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Constructor with 2 out of the 3 attributes of the class, since the <code>Id</code> attribute is not generated in Java but in the database.</p>
	 * 
	 * <h2>Parameters</h2>
	 * <ul>
	 *   <li><code>nombre</code>: Type <code>String</code>, referring to the player's name.</li>
	 *   <li><code>email</code>: Type <code>String</code>, referring to the player's email.</li>
	 * </ul>
	 */
	public Jugador(String nombre, String email) {
	
		this.nombre = nombre;
		this.email = email;
	}

	/**
	 * <h1>Getter del nombre</h1>
	 * <p>Obtiene el nombre del jugador.</p>
	 * 
	 * @return <code>nombre</code> del jugador.
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Gets the player's name.</p>
	 * 
	 * @return <code>name</code> of the player.
	 */
	public String getNombre() {
		return nombre;
	}

	/**
	 * <h1>Setter del nombre</h1>
	 * <p>Cambia el valor del nombre del jugador.</p>
	 * 
	 * @param nombre Nuevo valor para el nombre del jugador.
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Changes the player's name value.</p>
	 * 
	 * @param name New value for the player's name.
	 */
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	/**
	 * <h1>Getter del email</h1>
	 * <p>Obtiene el correo electrónico del jugador.</p>
	 * 
	 * @return <code>email</code> del jugador.
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Gets the player's email.</p>
	 * 
	 * @return <code>email</code> of the player.
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * <h1>Setter del email</h1>
	 * <p>Cambia el valor del correo electrónico del jugador.</p>
	 * 
	 * @param email Nuevo valor para el correo electrónico del jugador.
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Changes the player's email value.</p>
	 * 
	 * @param email New value for the player's email.
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * <h1>Setter del email</h1>
	 * <p>Cambia el valor del correo electrónico del jugador.</p>
	 * 
	 * @param email Nuevo valor para el correo electrónico del jugador.
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Changes the player's email value.</p>
	 * 
	 * @param email New value for the player's email.
	 */
	public Long getId() {
		return id;
	}
	
	/**
	 * <h1>Método toString</h1>
	 * <p>Sobrescrito y personalizado en el formato que se muestra.</p>
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Overridden and customized <code>toString</code> method in the displayed format.</p>
	 */
	@Override
	public String toString() {
		return "Jugador [Id: " + id + "# Nombre: " + nombre + "# Email: " + email + "]";
	}
	/**
	 * <h1>Método hashCode</h1>
	 * <p>Sobrescrito para obtener el hash del objeto, basado en <code>email</code> y <code>nombre</code>.</p>
	 * <p>No incluye <code>Id</code>, ya que es gestionado por la base de datos. En su lugar, usa una referencia compuesta para garantizar un hash único por objeto.</p>
	 * <p>Este método debe estar alineado con <code>equals()</code>.</p>
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Overridden <code>hashCode</code> method to obtain the object's hash, based on <code>email</code> and <code>name</code>.</p>
	 * <p>The <code>Id</code> is not included, as it is managed by the database. Instead, a composite reference ensures a unique hash for each object of the class.</p>
	 * <p>This method must be aligned with <code>equals()</code>.</p>
	 */
	@Override
	public int hashCode() {
		return Objects.hash(email, nombre);
	}
	
	/**
	 * <h1>Método equals</h1>
	 * <p>Sobrescrito para determinar si dos jugadores son iguales o diferentes.</p>
	 * <p>Se basa en los mismos criterios que <code>hashCode()</code> (alineación entre ambos), comparando el <code>email</code> y el <code>nombre</code> del jugador.</p>
	 * 
	 * @return <code>true</code> si los jugadores son el mismo, <code>false</code> en caso contrario o si es <code>null</code>.
	 * 
	 * <h1>ENGLISH</h1>
	 * <p>Overridden <code>equals</code> method that determines whether two Players are equal or different.</p>
	 * <p>Based on the same criteria as <code>hashCode()</code> (alignment between both), using the player's <code>email</code> and <code>name</code>.</p>
	 * 
	 * @return <code>true</code> if the players are the same, <code>false</code> otherwise or if <code>null</code>.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Jugador other = (Jugador) obj;
		return Objects.equals(email, other.email) && Objects.equals(nombre, other.nombre);
	}
}
