/**
 * <h1>Paquete Servicio</h1>
 * <p>Contiene y desarrolla los métodos definidos en la interfaz <code>RepositorioJugador</code>.</p>
 * <p>Está incluido en el paquete principal <code>com.juegos.app</code>.</p>
 * 
 * <h1>ENGLISH</h1>
 * <h1>Service Package</h1>
 * <p>Contains and implements the methods defined in the <code>RepositorioJugador</code> interface.</p>
 * <p>Included in the main package <code>com.juegos.app</code>.</p>
 */
package com.juegos.app.servicio;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.juegos.app.modelo.Jugador;
import com.juegos.app.repositorio.RepositorioJugador;

/**
 * <h1>Clase JugadorService</h1>
 * <p>Representa los servicios que ofrece la clase <code>Jugador</code>.</p>
 * <p>Contiene el atributo <code>repositorioJugador</code>.</p>
 * <p>Incluye un constructor generado automáticamente por Spring Boot.</p>
 * <p>Además, contiene los métodos CRUD básicos, así como dos métodos de búsqueda personalizados, basados en los atributos <code>nombre</code> y <code>email</code>.</p>
 * 
 * <h2>Anotaciones de Spring</h2>
 * <ul>
 *   <li><code>@Service</code> indica que esta clase es un componente de servicio gestionado por Spring.</li>
 *   <li><code>@Autowired</code> permite la inyección automática de dependencias.</li>
 * </ul>
 * 
 * <h1>ENGLISH</h1>
 * <h1>JugadorService Class</h1>
 * <p>Represents the services provided for the <code>Jugador</code> entity.</p>
 * <p>Contains the attribute <code>repositorioJugador</code>.</p>
 * <p>Includes a constructor automatically generated by Spring Boot.</p>
 * <p>Also includes basic CRUD methods and two custom search methods based on the <code>nombre</code> and <code>email</code> attributes.</p>
 * 
 * <h2>Spring Annotations</h2>
 * <ul>
 *   <li><code>@Service</code> indicates that this class is a Spring-managed service component.</li>
 *   <li><code>@Autowired</code> enables automatic dependency injection.</li>
 * </ul>
 * 
 * <p><strong>Author:</strong> David</p>
 * <p><strong>Version:</strong> 1.0</p>
 * <p><strong>Since:</strong> 2025</p>
 * 
 * @see org.springframework.beans.factory.annotation.Autowired
 * @see org.springframework.stereotype.Service
 */
@Service
public class JugadorService {
	/**
	 * <h1>Atributo repositorioJugador</h1>
	 * <p>Tipo: <code>RepositorioJugador</code>.</p>
	 * <p>Representa la interfaz que proporciona el acceso a los métodos definidos para las operaciones con la entidad <code>Jugador</code>, tanto CRUD como personalizados.</p>
	 * <p>Se inyecta automáticamente mediante Spring y es utilizado por los métodos del servicio.</p>
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>Attribute repositorioJugador</h1>
	 * <p>Type: <code>RepositorioJugador</code>.</p>
	 * <p>Represents the interface that provides access to the defined methods for handling the <code>Jugador</code> entity, including both CRUD and custom queries.</p>
	 * <p>It is automatically injected by Spring and used by the service methods.</p>
	 */
	private final RepositorioJugador repositorioJugador;
	
	/**
	 * <h1>Constructor de JugadorService</h1>
	 * <p>Constructor que inyecta automáticamente una instancia de <code>RepositorioJugador</code> usando la anotación <code>@Autowired</code> de Spring.</p>
	 * <p>Permite que la clase <code>JugadorService</code> acceda a los métodos definidos en el repositorio para realizar operaciones con la base de datos.</p>
	 * 
	 * @param repositorioJugador instancia del repositorio que será inyectada automáticamente por Spring.
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>JugadorService Constructor</h1>
	 * <p>Constructor that automatically injects an instance of <code>RepositorioJugador</code> using Spring’s <code>@Autowired</code> annotation.</p>
	 * <p>Allows the <code>JugadorService</code> class to access the repository methods to interact with the database.</p>
	 *
	 * @param repositorioJugador instance of the repository that will be injected automatically by Spring.
	 */
	public JugadorService(RepositorioJugador repositorioJugador) {
		this.repositorioJugador = repositorioJugador;
	}
	
	/**
	 * <h1>Obtiene todos los jugadores</h1>
	 * <p>Devuelve una lista con todos los registros de la entidad <code>Jugador</code> almacenados en la base de datos.</p>
	 * <p>Utiliza el método <code>findAll()</code> proporcionado por <code>JpaRepository</code>.</p>
	 *  
	 * @return una lista de todos los jugadores existentes.
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>Retrieves all players</h1>
	 * <p>Returns a list containing all <code>Jugador</code> entities stored in the database.</p>
	 * <p>Uses the <code>findAll()</code> method provided by <code>JpaRepository</code>.</p>
	 *
	 * @return a list of all existing players.
	 */
	public List<Jugador> obtenerTodos(){
		return repositorioJugador.findAll();
	}
	
	/**
	 * <h1>Busca un jugador por su ID</h1>
	 * <p>Devuelve un objeto <code>Jugador</code> cuyo identificador coincide con el valor proporcionado.</p>
	 * <p>Si no se encuentra ningún jugador con ese ID, lanza una excepción de tipo <code>RuntimeException</code>.</p>
	 * <p>Utiliza el método <code>findById()</code> de <code>JpaRepository</code> junto con <code>orElseThrow()</code>.</p>
	 *
	 * @param id identificador único del jugador a buscar.
	 * @return el jugador correspondiente al ID especificado.
	 * @throws RuntimeException si no se encuentra ningún jugador con ese ID.
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>Finds a player by ID</h1>
	 * <p>Returns a <code>Jugador</code> object whose ID matches the given value.</p>
	 * <p>If no player is found with the specified ID, a <code>RuntimeException</code> is thrown.</p>
	 * <p>Uses the <code>findById()</code> method from <code>JpaRepository</code> together with <code>orElseThrow()</code>.</p>
	 *
	 * @param id the unique identifier of the player to find.
	 * @return the player corresponding to the specified ID.
	 * @throws RuntimeException if no player is found with that ID.
	 */
	public Jugador obtenerPorId(Long id) {
		return repositorioJugador.findById(id).orElseThrow(() -> new RuntimeException("Jugador no encontrado"));
	}
	
	/**
	 * <h1>Busca jugadores por nombre</h1>
	 * <p>Devuelve una lista de jugadores cuyo atributo <code>nombre</code> coincide exactamente con el valor proporcionado.</p>
	 * <p>Utiliza el método personalizado <code>findByNombre()</code> definido en <code>RepositorioJugador</code>.</p>
	 *
	 * @param nombre nombre exacto del jugador a buscar.
	 * @return una lista de jugadores que coinciden con el nombre indicado.
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>Finds players by name</h1>
	 * <p>Returns a list of players whose <code>nombre</code> attribute exactly matches the given value.</p>
	 * <p>Uses the custom method <code>findByNombre()</code> defined in <code>RepositorioJugador</code>.</p>
	 *
	 * @param nombre the exact name of the player to search for.
	 * @return a list of players matching the specified name.
	 */
	public List<Jugador> obtenerPorNombre(String nombre) {
		return repositorioJugador.findByNombre(nombre);
	}
	
	/**
	 * <h1>Busca un jugador por email</h1>
	 * <p>Devuelve un <code>Optional</code> que puede contener un jugador cuyo atributo <code>email</code> coincide con el valor proporcionado.</p>
	 * <p>Utiliza el método personalizado <code>findByEmail()</code> definido en <code>RepositorioJugador</code>.</p>
	 * <p>El uso de <code>Optional</code> permite manejar de forma segura el caso en que no se encuentre ningún resultado.</p>
	 *
	 * @param email dirección de correo electrónico del jugador a buscar.
	 * @return un <code>Optional</code> que contiene el jugador, si existe.
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>Finds a player by email</h1>
	 * <p>Returns an <code>Optional</code> that may contain a player whose <code>email</code> matches the given value.</p>
	 * <p>Uses the custom method <code>findByEmail()</code> defined in <code>RepositorioJugador</code>.</p>
	 * <p>The use of <code>Optional</code> helps safely handle cases where no result is found.</p>
	 *
	 * @param email the email address of the player to search for.
	 * @return an <code>Optional</code> containing the player, if present.
	 */
	public Optional<Jugador> obtenerPorEmail(String email) {
		return repositorioJugador.findByEmail(email);
	}
	
	/**
	 *<h1>Crea un nuevo jugador</h1>
	 * <p>Guarda un nuevo objeto <code>Jugador</code> en la base de datos si no existe previamente.</p>
	 * <p>Si el jugador ya tiene un ID y ese ID ya existe en la base de datos, lanza una excepción.</p>
	 * <p>Utiliza el método <code>save()</code> de <code>JpaRepository</code> para persistir el jugador.</p>
	 *
	 * @param jugador objeto <code>Jugador</code> que se desea crear.
	 * @return el jugador recién guardado, incluyendo el ID generado por la base de datos.
	 * @throws RuntimeException si el jugador ya existe en la base de datos.
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>Creates a new player</h1>
	 * <p>Saves a new <code>Jugador</code> object to the database if it does not already exist.</p>
	 * <p>If the player has an ID and that ID already exists in the database, a runtime exception is thrown.</p>
	 * <p>Uses the <code>save()</code> method from <code>JpaRepository</code> to persist the player.</p>
	 *
	 * @param jugador the <code>Jugador</code> object to be created.
	 * @return the newly saved player, including the ID generated by the database.
	 * @throws RuntimeException if the player already exists in the database.
	 */
	public Jugador crearJugador(Jugador jugador) {
		if(jugador.getId() != null) {
			throw new RuntimeException("El jugador ya existe");
		}
		return repositorioJugador.save(jugador);
	}
	
	/**
	 * <h1>Modifica los datos de un jugador existente</h1>
	 * <p>Actualiza los datos de un objeto <code>Jugador</code> ya registrado en la base de datos.</p>
	 * <p>Primero verifica que el jugador tenga un ID válido y que exista en la base de datos.</p>
	 * <p>En caso contrario, lanza una excepción para evitar crear un jugador nuevo por error.</p>
	 * <p>Utiliza el método <code>save()</code> de <code>JpaRepository</code>, que sirve tanto para crear como actualizar.</p>
	 *
	 * @param jugador objeto <code>Jugador</code> con los datos actualizados.
	 * @return el jugador actualizado, tal como ha sido guardado en la base de datos.
	 * @throws RuntimeException si el jugador no existe en la base de datos.
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>Updates an existing player's data</h1>
	 * <p>Modifies the information of an existing <code>Jugador</code> already stored in the database.</p>
	 * <p>First, it checks that the player has a valid ID and that the record exists in the database.</p>
	 * <p>If not, it throws an exception to avoid accidentally creating a new player.</p>
	 * <p>Uses the <code>save()</code> method from <code>JpaRepository</code>, which handles both creation and updates.</p>
	 *
	 * @param jugador the <code>Jugador</code> object with updated data.
	 * @return the updated player as stored in the database.
	 * @throws RuntimeException if the player does not exist in the database.
	 */
	public Jugador modificarDatosJugador(Jugador jugador) {
		if(jugador.getId() == null || !repositorioJugador.existsById(jugador.getId())) {
			throw new RuntimeException("El jugador no existe");
		}
		return repositorioJugador.save(jugador);
	}
	
	/**
	 * <h1>Elimina un jugador por su ID</h1>
	 * <p>Elimina un registro de la base de datos correspondiente al ID proporcionado.</p>
	 * <p>Antes de realizar la eliminación, verifica si el jugador existe en la base de datos.</p>
	 * <p>Si no existe, lanza una excepción de tipo <code>RuntimeException</code>.</p>
	 * <p>Utiliza el método <code>deleteById()</code> de <code>JpaRepository</code>.</p>
	 *
	 * @param id identificador único del jugador que se desea eliminar.
	 * @throws RuntimeException si no se encuentra un jugador con el ID especificado.
	 * 
	 * <h1>ENGLISH</h1>
	 * <h1>Deletes a player by ID</h1>
	 * <p>Deletes a record from the database corresponding to the specified ID.</p>
	 * <p>Before deletion, it checks whether the player exists in the database.</p>
	 * <p>If the player does not exist, a <code>RuntimeException</code> is thrown.</p>
	 * <p>Uses the <code>deleteById()</code> method from <code>JpaRepository</code>.</p>
	 *
	 * @param id the unique identifier of the player to delete.
	 * @throws RuntimeException if no player is found with the specified ID.
	 */
	public void eliminarJugador(Long id) {
		if(!repositorioJugador.existsById(id)) {
			throw new RuntimeException("Jugador no encontrado");
		}
		repositorioJugador.deleteById(id);
	}
}
